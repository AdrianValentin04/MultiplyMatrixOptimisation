================= Matrix Multiplication =================
Student: Gheorghe Adrian-Valentin
Grupa: 331CB

I Description:
Tema a avut ca scop implementarea a 3 moduri de a calcula
formula C = B x A x A' + B' x B, unde A este o matrice NxN
superior triunghiulara, iar B este o matrice normala NxN.
Pentru primele 2 strategii am ales aceeasi ordine a
operatiilor:

1. C = A x A'
2. D = B x C
3. E = B' x B
4. result = D + E

Consider ca aceasta tema a fost utila deoarece, implementand
la ea, am reusit sa vad cum se poate optimiza in cativa pasi
simpli un program.

II Implementare:

1. NEOPTIM:

Pentru aceasta implementare am folosit 3 functii auxiliare,
denumite in conformitate cu ce face fiecare: AxAt(face produsul
dintre A si transpusa lui A), BtxB (face produsul dintre transpusa
lui B si B) si BxC (calculeaza produsul dintre matricea B si 
rezultatul functiei AxAt, stocat in variabila C). Ca si strategie
de alegere a indecsilor m am luat dupa ideea ca pentru A vom merge
de la i la N, iar la transpusa, in loc de a accesa elementul de pe
pozitia [i, k], respectiv [k, j], am accesat elementul [k, i],
respectiv [j, k] (primul caz il am la inmultirea Bt x B, in timp
ce al doilea caz este la AxAt). La final am facut suma dintre
matricile D si E, D avand rezultatul primei inmultiri, iar E
rezultatul celei de a doua.

a. Timpi de executie:
Run=./tema2_neopt: N=300: Time=0.601759
Run=./tema2_neopt: N=400: Time=1.477808
Run=./tema2_neopt: N=500: Time=2.896519
Run=./tema2_neopt: N=600: Time=5.339438
Run=./tema2_neopt: N=700: Time=7.810100
Run=./tema2_neopt: N=800: Time=12.650717
Run=./tema2_neopt: N=900: Time=16.474957
Run=./tema2_neopt: N=1000: Time=22.254190
Run=./tema2_neopt: N=1100: Time=31.663836
Run=./tema2_neopt: N=1200: Time=42.829006

b. Memory:
==3081952== Memcheck, a memory error detector
==3081952== Copyright (C) 2002-2017, and GNU GPL'd, by Julian Seward et al.
==3081952== Using Valgrind-3.18.1 and LibVEX; rerun with -h for copyright info
==3081952== Command: ./tema2_neopt /export/asc/tema2/input_valgrind
==3081952== Parent PID: 3080472
==3081952== 
==3081952== 
==3081952== HEAP SUMMARY:
==3081952==     in use at exit: 0 bytes in 0 blocks
==3081952==   total heap usage: 10 allocs, 10 frees, 7,689,812 bytes allocated
==3081952== 
==3081952== All heap blocks were freed -- no leaks are possible
==3081952== 
==3081952== For lists of detected and suppressed errors, rerun with: -s
==3081952== ERROR SUMMARY: 0 errors from 0 contexts (suppressed: 0 from 0)

c. Cache:
==3082017== Cachegrind, a cache and branch-prediction profiler
==3082017== Copyright (C) 2002-2017, and GNU GPL'd, by Nicholas Nethercote et al.
==3082017== Using Valgrind-3.18.1 and LibVEX; rerun with -h for copyright info
==3082017== Command: ./tema2_neopt /export/asc/tema2/input_valgrind
==3082017== Parent PID: 3080472
==3082017== 
--3082017-- warning: L3 cache found, using its data for the LL simulation.
--3082017-- warning: specified LL cache: line_size 64  assoc 16  total_size 12,582,912
--3082017-- warning: simulated LL cache: line_size 64  assoc 24  total_size 12,582,912
==3082017== 
==3082017== I   refs:      7,394,842,648
==3082017== I1  misses:            1,624
==3082017== LLi misses:            1,546
==3082017== I1  miss rate:          0.00%
==3082017== LLi miss rate:          0.00%
==3082017== 
==3082017== D   refs:      3,697,706,762  (3,534,722,621 rd   + 162,984,141 wr)
==3082017== D1  misses:      199,096,421  (  199,045,180 rd   +      51,241 wr)
==3082017== LLd misses:          122,775  (       91,683 rd   +      31,092 wr)
==3082017== D1  miss rate:           5.4% (          5.6%     +         0.0%  )
==3082017== LLd miss rate:           0.0% (          0.0%     +         0.0%  )
==3082017== 
==3082017== LL refs:         199,098,045  (  199,046,804 rd   +      51,241 wr)
==3082017== LL misses:           124,321  (       93,229 rd   +      31,092 wr)
==3082017== LL miss rate:            0.0% (          0.0%     +         0.0%  )
==3082017== 
==3082017== Branches:        164,153,854  (  163,913,178 cond +     240,676 ind)
==3082017== Mispredicts:         502,197  (      501,958 cond +         239 ind)
==3082017== Mispred rate:            0.3% (          0.3%     +         0.1%   )


2. OPTIMIZAT:
Pentru aceasta varianta am folosit aceleasi operatii de la subpunctul
anterior, insa m am folosit de o variabila de tip register double, in
care sa stochez suma pentru fiecare linie, astfel minimizand accesul
la memorie si, totodata, timpul de executie.

a. Timpi de executie:
Run=./tema2_opt_m: N=300: Time=0.246208
Run=./tema2_opt_m: N=400: Time=0.614497
Run=./tema2_opt_m: N=500: Time=1.223034
Run=./tema2_opt_m: N=600: Time=2.984601
Run=./tema2_opt_m: N=700: Time=5.213096
Run=./tema2_opt_m: N=800: Time=5.240544
Run=./tema2_opt_m: N=900: Time=7.232441
Run=./tema2_opt_m: N=1000: Time=9.063017
Run=./tema2_opt_m: N=1100: Time=12.551197
Run=./tema2_opt_m: N=1200: Time=18.156761

b. Memory:
==3081981== Memcheck, a memory error detector
==3081981== Copyright (C) 2002-2017, and GNU GPL'd, by Julian Seward et al.
==3081981== Using Valgrind-3.18.1 and LibVEX; rerun with -h for copyright info
==3081981== Command: ./tema2_opt_m /export/asc/tema2/input_valgrind
==3081981== Parent PID: 3080472
==3081981== 
==3081981== 
==3081981== HEAP SUMMARY:
==3081981==     in use at exit: 0 bytes in 0 blocks
==3081981==   total heap usage: 10 allocs, 10 frees, 7,689,812 bytes allocated
==3081981== 
==3081981== All heap blocks were freed -- no leaks are possible
==3081981== 
==3081981== For lists of detected and suppressed errors, rerun with: -s
==3081981== ERROR SUMMARY: 0 errors from 0 contexts (suppressed: 0 from 0)

c. Cache:
==3082009== Cachegrind, a cache and branch-prediction profiler
==3082009== Copyright (C) 2002-2017, and GNU GPL'd, by Nicholas Nethercote et al.
==3082009== Using Valgrind-3.18.1 and LibVEX; rerun with -h for copyright info
==3082009== Command: ./tema2_opt_m /export/asc/tema2/input_valgrind
==3082009== Parent PID: 3080472
==3082009== 
--3082009-- warning: L3 cache found, using its data for the LL simulation.
--3082009-- warning: specified LL cache: line_size 64  assoc 16  total_size 12,582,912
--3082009-- warning: simulated LL cache: line_size 64  assoc 24  total_size 12,582,912
==3082009== 
==3082009== I   refs:      3,714,280,534
==3082009== I1  misses:            1,629
==3082009== LLi misses:            1,549
==3082009== I1  miss rate:          0.00%
==3082009== LLi miss rate:          0.00%
==3082009== 
==3082009== D   refs:      1,133,700,729  (1,130,798,066 rd   + 2,902,663 wr)
==3082009== D1  misses:      199,374,830  (  198,963,589 rd   +   411,241 wr)
==3082009== LLd misses:          122,775  (       11,683 rd   +   111,092 wr)
==3082009== D1  miss rate:          17.6% (         17.6%     +      14.2%  )
==3082009== LLd miss rate:           0.0% (          0.0%     +       3.8%  )
==3082009== 
==3082009== LL refs:         199,376,459  (  198,965,218 rd   +   411,241 wr)
==3082009== LL misses:           124,324  (       13,232 rd   +   111,092 wr)
==3082009== LL miss rate:            0.0% (          0.0%     +       3.8%  )
==3082009== 
==3082009== Branches:        164,154,081  (  163,913,393 cond +   240,688 ind)
==3082009== Mispredicts:         502,258  (      502,017 cond +       241 ind)
==3082009== Mispred rate:            0.3% (          0.3%     +       0.1%   )


3. BLAS:
La aceasta strategie m am folosit de functiile cblas_dgemm si cblas_dtrmm
din biblioteca CBLAS. 
Prima operatie(cea de B x A) a fost calculata folosindu se cblas_dgemm, ai
carei parametri sunt: CblasRowMajor(matricea e stocata in row major order),
CblasNoTrans(matricile nu sunt transpuse) si datele din matrici, alaturi
de dimensiunea lor, pentru a putea rezolva o ecuatie de forma:
X = alpha * A * B + beta * X.

A doua operatie a fost facuta cu functia cblas_dtrmm, ale carei flag uri
sunt: CblasRowMajor(matricea e stocata in row major order), CblasRight
(matricea care ne intereseaza este la dreapta celeilalte), CblasUpper
(matricea care ne intereseaza este superior triunghiulara), CblasTrans
(matricea este transpusa) si CblasNonUnit(matricea nu e unit triangular).

Pentru a 3a operatie am folosit tot functia cblas_dgemm, ce are aceleasi
flag-uri ca si in prima operatie, cu exceptia unui flag CblasTrans, ce
arata ca prima matrice este una transpusa.

a. Timpi de executie:
Run=./tema2_blas: N=300: Time=0.020373
Run=./tema2_blas: N=400: Time=0.044563
Run=./tema2_blas: N=500: Time=0.091499
Run=./tema2_blas: N=600: Time=0.152167
Run=./tema2_blas: N=700: Time=0.232912
Run=./tema2_blas: N=800: Time=0.339021
Run=./tema2_blas: N=900: Time=0.472497
Run=./tema2_blas: N=1000: Time=0.669503
Run=./tema2_blas: N=1100: Time=0.877661
Run=./tema2_blas: N=1200: Time=1.122797

b. Memory:
==3081980== Memcheck, a memory error detector
==3081980== Copyright (C) 2002-2017, and GNU GPL'd, by Julian Seward et al.
==3081980== Using Valgrind-3.18.1 and LibVEX; rerun with -h for copyright info
==3081980== Command: ./tema2_blas /export/asc/tema2/input_valgrind
==3081980== Parent PID: 3080472
==3081980== 
==3081980== 
==3081980== HEAP SUMMARY:
==3081980==     in use at exit: 0 bytes in 0 blocks
==3081980==   total heap usage: 54 allocs, 54 frees, 7,747,684 bytes allocated
==3081980== 
==3081980== All heap blocks were freed -- no leaks are possible
==3081980== 
==3081980== For lists of detected and suppressed errors, rerun with: -s
==3081980== ERROR SUMMARY: 0 errors from 0 contexts (suppressed: 0 from 0)

c. Cache:
==3082004== Cachegrind, a cache and branch-prediction profiler
==3082004== Copyright (C) 2002-2017, and GNU GPL'd, by Nicholas Nethercote et al.
==3082004== Using Valgrind-3.18.1 and LibVEX; rerun with -h for copyright info
==3082004== Command: ./tema2_blas /export/asc/tema2/input_valgrind
==3082004== Parent PID: 3080472
==3082004== 
--3082004-- warning: L3 cache found, using its data for the LL simulation.
--3082004-- warning: specified LL cache: line_size 64  assoc 16  total_size 12,582,912
--3082004-- warning: simulated LL cache: line_size 64  assoc 24  total_size 12,582,912
==3082004== 
==3082004== I   refs:      292,675,778
==3082004== I1  misses:         10,949
==3082004== LLi misses:          3,172
==3082004== I1  miss rate:        0.00%
==3082004== LLi miss rate:        0.00%
==3082004== 
==3082004== D   refs:      108,654,080  (102,984,626 rd   + 5,669,454 wr)
==3082004== D1  misses:      1,758,046  (  1,559,169 rd   +   198,877 wr)
==3082004== LLd misses:        116,691  (     41,231 rd   +    75,460 wr)
==3082004== D1  miss rate:         1.6% (        1.5%     +       3.5%  )
==3082004== LLd miss rate:         0.1% (        0.0%     +       1.3%  )
==3082004== 
==3082004== LL refs:         1,768,995  (  1,570,118 rd   +   198,877 wr)
==3082004== LL misses:         119,863  (     44,403 rd   +    75,460 wr)
==3082004== LL miss rate:          0.0% (        0.0%     +       1.3%  )
==3082004== 
==3082004== Branches:        4,359,667  (  4,103,701 cond +   255,966 ind)
==3082004== Mispredicts:        67,808  (     66,926 cond +       882 ind)
==3082004== Mispred rate:          1.6% (        1.6%     +       0.3%   )

4. Analiza:
Asa cum se poate vedea din timpii de executie si din graficul prezent in 
arhiva, algoritmul neoptimizat este aproape de 2 ori mai lent decat cel
optimizat folosind o variabila suma, aceasta discrepanta crescand odata
cu valorile lui N. In ceea ce priveste algoritmul in care am utilizat 
functiile cblas, din timpi si din grafic se observa cum acesta este mult
mai eficient decat celelalte 2, timpii nedepasind 2 secunde in cele 10
teste efectuate. Si aici, ca si la celelalte 2, cu cat N creste, cu atat
se poate observa ca discrepanta dintre blast si opt este mai mare.

In ceea ce priveste cache ul, asa cum era de asteptat, varianta cu functiile
cblas are o rata foarte mica de miss uri in comparatie cu celelalte 2 variante.

Campul I refs se refera la numarul de instructiuni executate, iar valorile
pentru cele 3 variante sunt: 

a. neopt - 7,394,842,648
b. opt - 3,714,280,534
c. cblas - 292,675,778

Astfel se observa cum numarul de instructiuni executate in varianta optima ajunge
aproximativ la jumatatea numarului dat de varianta neoptima, in timp ce la varianta
cblas numarul este de ordinul milioanelor, nu al miliardelor.

Campul D refs se refera la numarul de accesari ale memoriei RAM, iar valorile sunt:

a. neopt - 3,697,706,762
b. opt - 1,133,700,729
c. cblas - 108,654,080

Concluziile sunt la fel ca mai sus, discrepantele insa sunt mai mici.

Bibliografie:
https://ocw.cs.pub.ro/courses/asc/laboratoare/04
https://ocw.cs.pub.ro/courses/asc/laboratoare/05
https://ocw.cs.pub.ro/courses/asc/laboratoare/06
